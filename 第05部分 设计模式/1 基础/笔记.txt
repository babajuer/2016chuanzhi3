【【设计模式理论】】


【武功角度来看设计模式】
《js基础》：
  马步 -- 基础 --非常重要 -- 建筑物的地基

《js面向对象》   
少林长拳  各种简单的掌法  棍法 掌法 枪法 步伐 。。。基础  修炼内功的一些基础   ---  基础  --- 学习更加高深武功的基础


《设计模式（而是面向对象开发的一种思维）》

设计模式又称为招式和内功
我们称面向对象的思维：内功
招式：代码


  <内功篇>
     面向对象思维
    少林易筋经  洗髓经  -- 内功的高深--- 修炼30年 --未必能够达到3层   乾坤大挪移   吸星大法  内功修为 

  <招式篇 - 独孤九剑>
	即使不会内功也厉害，但是有了内功可以更厉害
       四个人 GOF 
      23种经典设计模式

     后人有总结了很多模式

《高手：忘记模式，自创模式，收放自如》

降龙十八掌： 洪七公 和郭靖都会降龙十八掌， 但是郭靖刚开始的时候，由于内功若，打出来的掌只能吓唬人。。 但是洪七公已经可以伸缩自如，灵活运用，

炉火纯青，收放自如。

40岁  年薪  世界500强 ---每次和他聊天都是说了解。。。当然谦虚了，但是就是告诉大家面向对象思维博大精深。。。


《总结1》
设计模式是为了更好的运用面向对象，重点是掌握面向对象的思维

框架，架构师  --    张无忌  郭靖 少林寺高僧  -- 有一定的内功（设计模式功底--面向对象开发的功底）

几乎所有的框架都是基于面向对象的，为了保证框架（建筑物）安全，稳定，可扩展，



《总结2 - 设计模式修炼》
修炼的不是怎么样写代码
每种设计模式都有一个固定的代码结构。。。
这个不是我们的根本，我们不需要去背诵每种设计模式的代码如何编写的，面试也不会
设计模式他是一种内功修炼，是你对面向对象编程的理解和灵活运用。

《》
所以我们今天的重点是通过案例来学习面向对象思维
我们以淘宝或者京东的某个页面来讨论如何开发复杂，大型的，万人共同开发的项目
设计模式基本是为团队化，大型，复杂项目服务的。
不过之前我们先看下什么是设计模式

【什么是设计模式】

《来源》
设计模式来源于建筑学，中国，欧洲， 故宫，艾菲尔塔塔，用于解决生活中一些问题的最佳解决方案。



比如 建造一座桥，稳定，坚固，环保（力学，物理学，环境保护，生态）
这个方案经过很多人经验总结，最终形成一个最优解决方案，
这个解决方案能够保证大桥的坚固性。

《方案》

方案：方案是什么，方案就是通过大家的经验或者研究，经过一代代人总结出来的最优解决问题的方法论。
生活中有很多方案。

比如四大发明：造纸术，活字印刷术等都是方案。

这些方案经过后人的研究创新形成更加优秀的方案。

设计模式来源于生活，他就是帮助我们解决 生活中遇到的一些问题。


《《欣赏设计模式 - 从程序或者网站中看看那些用到了设计模式》》



《策略模式》

策略模式:r如果一个问题有多种解决方案，可以用策略模式


程序中： 
比如实现一个计算器，计算器需要有多种算法：比如减法，加法，乘法，等等，我们可以用策略模式。

模块化，也就是通过对象将加法运算，减法运算等全部模块化，彼此独立 ，然后再通过策略模式整合


每一种算法看做一种策略。
比如，我们一开始我们的计算器只支持5中算法：减法，加法，乘法，除法。。。

到了后来，发现我们开发的计算器功能很多人使用，我们又开始增加新的功能：比如乘方，三次方，sin cos，微积分。。。叠乘

只要到了一个函数（用一个函数把所有东西都放在一起）

function



如果不用策略模式：也能做，但是要破坏原有的代码结构，这样你原来开发的东西都要修改

《单例模式》

单例模式场景：
如果你想保证整个页面只有一个实例的话，可以用单例模式


场景，原则，好处，代码等等综合去一一讲解每个设计模式


再比如购物车，购物车是不是应该全局唯一。不管你在哪个产品页面购买产品，只需要一个实例化对象就可以了。那么我们可以考虑单例模式。（比如word文档 qq聊天不是单例，dw软件是单例，你永远只能打开一个软件，而qq是多个实例的，你可以和不同的人聊天）



单例模式:如果你需要保证整个程序只有一个实例 --比如购物车 -- 节省内存空间


《模板模式  复印模式》


来源于生活 

设计模式虽然很高深，但其实你们以前早就接触过了，只是你们没有注意到。

再比如产品列表，假如我们有一个产品对象，这里需要显示很多对象，如果每次都要实例化一个对象，会很累，我们可以用复制模式（生活来源：复印机）



《代理模式  中介模式》


来源于生活--- 大家有没有租过房子，买过房子， -----中介--  黑中介---
我  中介  房产拥有的人。。。。 
跑腿 讨论价钱 签署合同  -- 我们根本不用见到真正的房东也能使用房子。。。中介帮我们做了很多事情。。。

ajax -- 需要和后台的服务器进行交互。。
我们完全将所有和服务器交互的事情交给中介对象 来做。。。我们只管从中介对象里面得到方法即可

function zhongjie（）{

	this.getProductsList=fucntion(){}
	this.deleteProductList = function(){}
}

我们作为前端开发人员，只需要和中介打交道，就可以了。。我们只需会用中介给我们的方法名称。。

接下来会详细讲解中介者模式




【设计模式是一种艺术】

《什么是艺术》
平衡 度
音乐：抑扬顿挫 
美食：火候
书法：入木三分，轻重缓急
管理：说话，恰到好处，批评一个人，，7分 还是5分，，如何批评一个人才能激发他更大的工作热情。。。
这个艺术之通过代码是无法深刻领悟的，需要实践的能力

音乐 美术 管理 书法 说话能力 为人处世，政治（领导，）。。。
平衡。。。利益团体。。。


《这也是为什么设计模式易学难用》
 1，会用但很难把握这个度
一般需要大量的项目经验你才能慢慢的体会这个度。


因为设计模式是一种艺术，需要大量的实践工作总结
所以你可以成为js高手，但是要成为架构高手，需要一定的实践
但是如果你连设计模式都不懂，那么之后的工作你就无法向这个方面去想。那么能力再强也很难成为架构师。

我们一定要很早的有这种意识，开发高质量代码的意识。
之后我们在实践的过程中逐步领悟设计模式。
越早了解越早成为大师。



比如给你一个需求，计算器，我们即使不用设计模式也能做，用设计模式也能做，我们用了50%的设计模式也能做 

就类似降龙十八掌，可以发出100%的张力 也可以发出80%的张力

到底该发出多少张力呢。。。根据项目的实际情况
比如淘宝--超级复杂--需求持续变化，页面以后也会不断更新--必然设计模式
比如今天用这个技术，明天出现新的技术，又要改变，大公司人才多，必然与时俱进。
为了应对变化，必须用设计模式
比如小网站，基本开发之后没有什么变化，功能复杂程度中等 --这个时候我们没必要100%设计模式，可以只使用50%就行了。。。

至于到底怎么用，如何用  用多少，都是需要根据你的经验来定的。。。。


所以大家都会设计模式，但是想用好，很难---高级开发程序员很多，但是好的架构师很少，就是因为这个度的问题。。。
























----------------------------------------------------------------------------------------------------------




【【【面向对象编程思维 -- 设计模式编程思维】】】

设计模式：内功修炼和外功修炼 

经典的23种设计模式  -- 招数

我们要学习的绝对不光只是招数，更多的是学习为什么这样去做，也就是内功，也就是艺术


前面讲过了，设计模式是面向对象编程的一种内功修炼，他是辅助面向对象，所以只要我们掌握了面向对象编程思维，
基本我们就不用我教大家了，大家也能自学会了。。
所以这节课很重要，学会了，才能更好的理解面向对象开发以及设计模式。


整个面向对象编程或者设计模式解决什么问题---三个字模块化编程


【思维1本质 - 模块化 - 解耦和】

<为什么需要解耦和>
1应对变化
需求变化
功能时刻变化
技术时刻更新
经理每天都有好的想法
代码每天都在变
架构每天都在变


针对这么多的变化。。。
如果我们只用一个函数。。。将所有的东西写在一起，那么一旦出现变化，，，，是不是我们之前写的代码都受到影响。
但是如果我们将功能模块化的话，即使需求变更，那么影响的只是某个模块。@


<面向未来编程>
也即是说，我们事先不知道客户会变，但是有经验的工程师会预测到这个模块将来可能会变化，所以他提早运用设计模式抽离出变化，然后疯转起来，
那么即使未来变化，也永远不会影响其他模块。

<耦合度>

耦合度就是关联程度
松耦合：
紧耦合：电脑是一个模块化产品，我可以任意更换里面的零件而不影响整体功能。。。。
可以使得不同的厂商生产不同的零件：cpu -- 英特尔 AMD 电源 硬盘 鼠标 键盘 。。。。。
汽车：制造，，，，应该叫汽车组装。。。汽车其实就是组装而成的。。。。发送机，车灯，。。。。轮胎。。。。
手机的生产，飞机的生产。。。。
SAP飞机厂商管理---波音飞机 -- 全部无纸化制造。--无纸化组装---一个飞机包含很多零部件，1万---10万，但是波音不生产任何零件。。。但是依旧可以生产出世界最优秀的飞机。。。


总结：
所以我们整个软件架构都是在解决耦合度，降低模块之间耦合度，用于提高框架的可扩展性，稳定性，应对变化的能力。。。。




模块化的好处

需求变更影响最小，不用大规模修改代码
易于发现问题
出了问题，我换个零件而不是换整个电脑


易于分工。

易于测试。

易于发现问题。


模块化编程是未来趋势
现在飞机，汽车，电脑都是模块制造，又称组装







【【面对复杂问题如何编程】】

【什么是复杂问题】
1，比如京东，一个产品首页，包含多个小系统，比如推荐系统，类似新浪微博的评论系统，产品详细信息，产品基本信息，第三方广告，打折，优惠，客服。。。。
功能复杂，庞大，模块多，细节多，还有什么，
2， 变化多，未来可能出现的变化多。。。
      变化多，比如今天评论系统是这样的，过了一段时间评论系统又变了。。。。
3，团队化项目

注意：

我们前面做的函数式编程，功能都比较简单。。不属于复杂问题，直接函数解决了。。。







【面对复杂问题如何编程四步走策略】


【1，弄懂让你做什么 20%（10--20）】


   非常重要 如果你不懂就直接编程，那么即使你写的再好，最终也是个屁 
   方向错了，一切都错了。。。。
   这也是大多数软件失败的原因之一

【2，思考  30%】
	思考该怎么做--函数，面向对象，设计模式，使用什么技术，怎么用，需要和谁沟通，需要和谁联系，需要多长时间，如何规划你的时间。。。
	UML来组织我们的思路。。。





我们用一些工具辅助我们思考
在软件领域常用的工具UML
大家先看我怎么用的，一会给大家时间安装




我们可以用一个uml图来辅助我们思考:

《uml是什么》
uml提供了一些图形来帮助我们理清思路，宏观思考问题，用于一些比较复杂的项目，比如淘宝，京东，百度，腾讯，sina，网易等等大型复杂项目
如果只是实现某个特效，某个函数，没必要使用

UML提供了一些软件行业标准化图形来描述代码，用于不同行业之间的人互相沟通。毕竟不是所有人都懂代码。类似英语是全世界沟通的语言一样。
uml属于架构师，项目经理课程范畴，今天我们不是主讲UML，只是借用一下帮助我们整理思路。


《uml类图》
通过演示讲解类图
uml用例图
通过演示讲解
uml时序图
通过演示讲解


下面我们通过真实场景来演示如何用uml思考：


《任何复杂项目分成两步思考》
第一步：宏观思考应该分成哪几个模块
第二步：针对每个模块一一思考



《场景》
开发淘宝网站首页
我们可以将这个页面模块化
产品模块
产品详细信息模块
产品评论模块
广告模块


《画出uml图》



《uml关系图》

1，关联关系
一个对象是另一个对象的属性。。。

2，继承关系
前面已经讲过

3，组合关系,

4，聚合关系
电脑对象 --CPU 硬盘，鼠标 键盘 。。。
5，依赖关系




《总结--以后大家写代码--如果采用面向对象要考虑使用这些关系》
比如：
传参，如果需要传递多个参数，可以考虑使用对象--比如我们之前的动画框架
比如，一个对象需要使用另一个对象，我们可以使用关联关系，比如之前百度案例。。。
一切皆对象


【3 写代码 30%  并通过代码总结面向对象的编程思维】

【思维2：分层思想】
分层思想是为了分工，同时也是解耦和的一种最常用的方式。
这里我们将功能分层： 通用层，view层，模块层，页面层，model层（其他框架可能有服务层，专门负责和服务器交互，比如ajax）
分层的好处：方便团队分工开发，方便测试定位问题在那个层，方便扩展。


【思维3：单一职责原则】
模块化的指导方针。
模块是同类功能的合集，比如产品模块，订单模块。
不要把产品模块的代码放在订单模块里面。
好处，当需求变更之后，如果需要改动产品模块，如果你把产品模块的代码放在其他模块，这样需求变更，我们要改动多个模块。
如果都放在一起，这样产品需求变更，只需要修改一个模块即可。


核心不是为了只有一个功能，而是当需求变化的时候，只影响一个模块。


【思维4:开放封闭原则】
当新增需求的时候，尽量不修改原有模块，而是新增代码。
比如如果不用模块化方式开发。把所有的代码都放在一个函数里面。那么新增一个模块，我要修改这个函数。
而如果运用模块化开发，我只需要添加一个模块即可。这样的好处是不影响已有的代码。

【思维5：面向接口，面向抽象编程】
由于js不支持接口 我们不再讲解。





【4 测试 20%（10--20）】




【运用面向对象思维分析所有问题】
京东首页
淘宝首页
新浪体育频道
百度糯米
订单









【【设计模式理论2 --- 第一天总结】】


【设计模式或者面向对象开发其实就是将代码复杂化】
以前：一个函数
后来- 面向对象 --把一些函数组成一个集合。。比如产品 增加 删除--放在一个对象里面。。。
设计模式 -- 进一步拆分对象。。。

《原因》
分工合作的必要
客户每日三疯

应对客户每日三疯。。。
客户给你钱。。。有钱就是爷。。
客户永远都是不满足的，给你最少的钱让你做最多的事情。。。
如何应对客户的变化

极限方式：允许客户无限变更。。
一个完美的框架，不管客户怎么变更，程序员只需要瞬间就能够满足客户的修改。。
京东淘宝：优惠方式：

打折，买三送一，京东豆，等级（vip，普通客户，老客户）

面向未来编程---
防止程序因为复杂，因为框架扩展能力不强而失败。。。


【设计模式的重要性】

设计模式已经不再像以前，只是架构师必须掌握的，

目前设计模式已经和吃饭一样普及了。
设计模式专为面向对象的语言而生，只要语言是面向对象的，就会存在设计模式

js语言在很多人眼里不被接受，---不是一种完全面向对象的语言--
html5 发力  -- js淘汰-- 
最新的js版本--已经完全支持面向对象 

《js世界很多都是用设计模式实现的》

js事件：观察者模式
js里面 创建一个实例--  工厂模式


《外面的世界》
苹果开发： 设计模式低端化，吃饭化，，
Android开发
java jsp  
.net
PHP 开发 



只要一个语言支持面向对象，，就必然存在设计模式。。。

《相通性》
设计模式是一种通用技术，和具体的语言没有关系，只要你学会基于一种语言的设计模式，就可以不学自动所有语言的设计模式

无非就是语言实现模式不一样。



【如何学习设计模式】

修炼内功：学习设计模式思维
学习招式：结合内功修炼招式，通过招式完善内功。



给你一个需求或者场景，你能快速知道该用哪种设计模式才能更好的应对未来需求变更，使得框架更加健壮，可扩展，稳定

目前设计模式23种  经过后人创造100多种。。其实设计模式可以无限。。。。

最重要的是掌握设计模式的灵魂而不只是掌握如何写设计模式的代码。。。

代码一点都不重要，关键是给你一个需求，或者给你一个任务，你能很快的知道用哪个设计模式能够完美解决
问题



比如： 让你开发一个新浪体育 ，当每场比赛结束，需要更新多个模块，比如比赛排名，教练数据统计，球队信息更新，多个球员信息更新。。。。
观察者模式 策略模式 工厂模式 。。。。。



《大家以后不要为了模式而模式》


《设计模式存在的误区》
对于一些有经验的。。。高端的技术

初级： 不懂设计模式
中级：听过设计模式
高级：会用一点设计模式
架构师： 灵活运用多种设计模式
牛人：创造模式。。。。

无招胜有招。。。
神话。。。
找工作，面试 -- 懂设计模式 加分

如果你能吹一吹设计模式 -- 吹牛 - 你能和面试官稍微能够用设计模式的语言对话。。。
如果你对设计模式的理解超过面试官--那么你就会让面试官刮目相看。。。

没有实践或者多年的实践是很难的。。。。


给大家分享，尽量让你们吸收我的经验，达到可以和面试官谈谈的地步。。。。



【模块化编程 --seaJS】
京东，淘宝





